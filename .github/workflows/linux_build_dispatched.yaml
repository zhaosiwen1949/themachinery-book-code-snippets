name: Build Book Samples (dispatched)

on: workflow_dispatch

jobs:
  build-engine:
    name: Build Engine
    runs-on: ubuntu-20.04
    env:
      TM_LIB_DIR: ${{github.workspace}}/lib
      TM_SAMPLE_PROJECTS_DIR: ${{github.workspace}}/sample_projects
      TM_SDK_DIR: ${{github.workspace}}/the_machinery/
      TM_OURMACHINERY_COM_DIR: ${{github.workspace}}/doc
    steps:
    - name: cache tm
      if: ${{ success() }}
      id: cached-tm
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/cache
        key: ${{ runner.os }}-cache-tm
    - name: Checkout repo
      if: steps.cached-tm.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        path: ./samples
    - name: Checkout tmbuild-action repo
      if: steps.cached-tm.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        path: tmbuild-action
        repository: simon-ourmachinery/tmbuild-action
    - name: Update apt
      if: steps.cached-tm.outputs.cache-hit != 'true'
      run: sudo apt update -y
    - name: Install xlib dependencies
      if: steps.cached-tm.outputs.cache-hit != 'true'
      run: sudo apt install -y  xvfb libasound2-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-cursor-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libtinfo5 libminizip1 unzip libxcb-xrm-dev
    - name: download and install clang and build-essential
      if: steps.cached-tm.outputs.cache-hit != 'true'
      run:  sudo apt install build-essential lld clang -y
    - name: set display env
      if: steps.cached-tm.outputs.cache-hit != 'true'
      run: export DISPLAY=:99.0
    - name: Checkout the machinery
      if: steps.cached-tm.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        path: ./the_machinery
        repository: OurMachinery/themachinery
        token: ${{ secrets.TMBUILD_ACTION }}
        tests: false
    - name: Checkout OurMachinery/sample-projects
      if: steps.cached-tm.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        path: sample_projects
        repository: OurMachinery/sample-projects
        ref: master
    - name: run tmbuild
      if: steps.cached-tm.outputs.cache-hit != 'true'
      uses: ./tmbuild-action
      id: tmbuild
      with:
        path: ${{github.workspace}}/the_machinery/
        package: release-package.json
    - name: copy tm
      if: steps.cached-tm.outputs.cache-hit != 'true'
      run: |
        mkdir ${{github.workspace}}/cache
        mv ${{github.workspace}}/the_machinery/build/*.zip ${{github.workspace}}/cache/cache.zip
    - name: cache tm
      if: steps.cached-tm.outputs.cache-hit != 'true'
      id: cache-tm
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/cache
        key: ${{ runner.os }}-cache-tm
        restore-keys: |
          ${{ runner.os }}-cache-tm
  build-samples:
    name: Build Samples
    runs-on: ubuntu-20.04
    needs: build-engine
    env:
      TM_LIB_DIR: ${{github.workspace}}/lib
      TM_SAMPLE_PROJECTS_DIR: ${{github.workspace}}/sample_projects
      TM_SDK_DIR: ${{github.workspace}}/cache/
      TM_OURMACHINERY_COM_DIR: ${{github.workspace}}/doc
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        path: ./
    - name: Checkout tmbuild-action repo
      uses: actions/checkout@v2
      with:
        path: tmbuild-action
        repository: simon-ourmachinery/tmbuild-action
    - name: Update apt
      run: sudo apt update -y
    - name: Install xlib dependencies
      run: sudo apt install -y  xvfb libasound2-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-cursor-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libtinfo5 libminizip1 unzip libxcb-xrm-dev
    - name: download and install clang and build-essential
      run:  sudo apt install build-essential lld clang -y
    - name: set display env
      run: export DISPLAY=:99.0
    - name: cache tm
      id: cache-tm
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/cache
        key: ${{ runner.os }}-cache-tm
    - name: unzip cache
      run: |
        cd ${{github.workspace}}/cache
        unzip -q cache.zip
    - name: run tmbuild
      uses: ./tmbuild-action
      id: tmbuild
      with:
        mode: Plugin
        config: Debug
        tests: false